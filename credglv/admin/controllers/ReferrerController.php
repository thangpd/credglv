<?php
/**
 * @project  edu
 * @copyright Â© 2017 by ivoglent
 * @author ivoglent
 * @time  7/20/17.
 */


namespace credglv\admin\controllers;


use credglv\core\BaseObject;
use credglv\core\components\Form;
use credglv\core\components\Hook;
use credglv\core\components\metaBox\AT_Meta_Box;
use credglv\core\components\Script;
use credglv\core\Controller;
use credglv\core\interfaces\ControllerInterface;
use credglv\core\interfaces\RequestInterface;


use credglv\core\RuntimeException;
use credglv\models\ReferrerModel;


class ReferrerController extends AdminController implements ControllerInterface {

	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
		credglv()->hook->listenFilter( 'manage_referrer_posts_columns', [ $this, 'referrerColumns' ] );
		credglv()->hook->listenHook( 'manage_referrer_posts_custom_column', [ $this, 'renderReferrerColumns' ], 10, 2 );
	}

	/**
	 *
	 * @param $column
	 * @param string $post_id
	 */
	public function renderReferrerColumns( $column, $post_id = '' ) {
		global $post;
		$referrer = ReferrerModel::findOne( $post );
		switch ( $column ) {
			case 'price' :
				$price = $referrer->referrer_price;
				if ( ! is_numeric( $price ) ) {
					$price = 0;
				}
				echo credglv()->helpers->general->currencyFormat( $price );
				break;
		}
	}

	/**
	 * Add some referrer column to list
	 *
	 * @param $columns
	 */
	public function referrerColumns( $columns ) {
		credglv()->helpers->arrayInsertAfter( $columns, 'title', [ 'price' => '<div style="display : inline-block; text-align:left; width: 100%;">Price</div>' ] );

		return $columns;
	}

	public function saveReferrer( $post_id ) {
		$data_post = isset( $_POST ) ? $_POST : array();
		if ( isset( $data_post['action'] ) && $data_post['action'] == 'editpost' ) {
			$this->saveMetaBox( $post_id, $data_post );
		}
	}

	//save meta post
	public function saveMetaBox( $post_id, $data_post ) {
		$model = ReferrerModel::getInstance();
		$model->saveMetaData( $post_id, $data_post );

		//save taxonomy level
		if ( isset( $data_post['referrer_level'] ) && ! empty( $data_post['referrer_level'] ) ) {
//			$modelLevel = \credglv\models\ReferrerLevelModel::getInstance();
//			$modelLevel->saveLevel( $post_id, $data_post['referrer_level'] );
		}

		//save taxonomy language
		if ( isset( $data_post['referrer_language'] ) && ! empty( $data_post['referrer_language'] ) ) {
//			$modelLanguage = \credglv\models\ReferrerLanguageModel::getInstance();
//			$modelLanguage->saveLanguage( $post_id, $data_post['referrer_language'] );
		}
	}

	/**
	 * Save Referrer Category meta data
	 *
	 * @param $term_id
	 * @param $data
	 */
	public function saveMetaCatBox( $term_id, $data ) {
//		$model = ReferrerCategoryModel::getInstance();
//		$model->saveMetaData( $term_id, $data );
	}

	public function delete() {
		if ( credglv()->wp->wp_delete_post( $_POST['post_id'], true ) ) {
			$this->responseJson( [
				'code'    => 200,
				'message' => 'Delete success',
			] );
		}
	}

	public function save() {
		$postType = $_POST['post_type'];
		$postId   = credglv()->wp->wp_write_post();
		$post     = get_post( $postId );
		$this->responseJson( [
			'code'    => 200,
			'message' => 'Update ' . $postType . ' success',
			'data'    => $this->render( 'partials/' . $postType, [ 'post' => $post ], true )
		] );

	}

	public function set_input_edit_post( $post ) {
		if ( $post->type == 'edit' ) {
			echo '<input type="hidden" value="' . $post->ID . '" name="post_ID" />';
		}
	}

	public function get_fields( $fields ) {
		foreach ( $fields as $field ) {
			echo $field;
		}
	}

	public function get_post_to_type( $postId, $type ) {
		$post = get_post( $postId );
		if ( $post->post_type == $type ) {
			return $post;
		} else {
			return $this->get_post_to_type( $post->post_parent, $type );
		}
	}

	public function getModal() {

		$postId = ( isset( $_POST['post_ID'] ) ) ? $_POST['post_ID'] : $_POST['post_parent'];

		$post = get_post( $postId );
		if ( isset( $_POST['post_ID'] ) ) {
			// edit post
			$post->title = 'Edit ' . $_POST['post_type'] . ' : ' . $post->post_title;
			$post->type  = 'edit';
		} else {
			//add new post
			$post->title = 'Add new ' . $_POST['post_type'];

			//custom input
			$post->type        = 'add';
			$post->post_title  = '';
			$post->post_parent = $postId;
		}
		$post->post_type = $_POST['post_type'];
		$className       = "credglv\models\\" . ucfirst( $_POST['post_type'] ) . "Model";

		$model = $className::findOne( $post );

		$fields = credglv()->helpers->form->generateFormElement( $model, new Form() );

		$this->responseJson( [
			'code' => 200,
			'data' => $this->render( 'partials/' . $_POST['post_type'] . '-form', [
				'post'   => $post,
				'model'  => $model,
				'fields' => $fields
			], true )
		] );
	}

	public function getTemplate( $post, $postType ) {

		// require('create-new-chapter.php');
		// die;
	}

	public function showTemplateAddReferrer() {
		global $post;
		$form  = new Form();
		$model = ReferrerModel::findOne( $post );
		/** @var ReferrerModel $model */
		$form->bind( $model->getData( $model->getData() ) );
		$instructors = $model->getInstructors( $post->ID );
		$tabs        = [
			'general'    => __( 'Referrer Information', 'credglv' ),
			'curriculum' => __( 'Curriculum', 'credglv' ),
		];
		$tabs        = apply_filters( 'credglv_referrer_form_tabs', $tabs );
		$this->render( 'create', [
			'form'        => $form,
			'tabs'        => $tabs,
			'model'       => $model,
			'post'        => $post,
			'attributes'  => $model->attributes,
			'instructors' => $instructors
		] );
	}

	public function renderForm() {
		global $post;
		$this->render( 'modal', [ 'post' => $post ] );
	}

	public function addTemplateReferrer() {
		add_meta_box(
			'create-new-referrer',
			'Create new referrer',
			[ self::getInstance(), 'showTemplateAddReferrer' ],
			'referrer',
			'normal',
			'high'
		);
		add_action( 'admin_footer-post-new.php', [ self::getInstance(), 'renderForm' ] );
		add_action( 'admin_footer-post.php', [ self::getInstance(), 'renderForm' ] );

		add_action( 'admin_footer-post-new.php', [ FieldController::getInstance(), 'renderPopup' ] );
		add_action( 'admin_footer-post.php', [ FieldController::getInstance(), 'renderPopup' ] );
	}


	public function addMetaBoxReferrer() {
		$pre    = 'credglv_referrer';
		$config = array(
			'id'             => 'credglv_referrer_meta_box',
			// meta box id, unique per meta box
			'title'          => 'Referrer Meta Fields',
			// meta box title
			'pages'          => array( 'referrer' ),
			// post types, accept custom post types as well, default is array('post'); optional
			'context'        => 'normal',
			// where the meta box appear: normal (default), advanced, side; optional
			'priority'       => 'high',
			// order of meta box: high (default), low; optional
			'fields'         => array(),
			// list of meta fields (can be added by field arrays)
			'local_images'   => false,
			// Use local or hosted images (meta box images for add/remove)
			'use_with_theme' => false
			//change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).
		);


		/*
		 * Initiate your meta box
		 */
		$my_meta = new AT_Meta_Box( $config );

		/*
		 * Add fields to your meta box
		 */

		$list_sentences   = [];
		$list_sentences[] = $my_meta->addText( $pre . '_list_sen_title_text', array( 'name' => 'Title' ), true );
		$list_sentences[] = $my_meta->addTextarea( $pre . '_list_sen_area', array( 'name' => 'Description' ), true );

		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addRepeaterBlock( $pre . '_sentence_repeator', array(
			'inline'   => true,
			'name'     => 'List Sentences',
			'fields'   => $list_sentences,
			'sortable' => true
		) );
		//meta data


		$my_meta->addDate( $pre . '_class_date_area', array(
			'name'  => __( 'CLASSROOM OPENS', 'credglv' ),
			'group' => 'start'
		) );
		$my_meta->addText( $pre . '_class_open_area', array(
			'name'  => 'Open in',
			'group' => 'end'
		) );
		$my_meta->addText( $pre . '_salary_area', array(
			'name'  => __( 'ESTIMATED SALARY', 'credglv' ),
			'group' => 'start'
		) );
		$my_meta->addText( $pre . '_based_on_area', array(
			'name'  => 'Based on',
			'group' => 'end'
		) );

		//Testimonial field
		$my_meta->addTextarea( $pre . '_testimonial_area', array( 'name' => 'Testimonial Shortcode' ) );


		//about field
		$my_meta->addTextarea( $pre . '_about_area', array( 'name' => 'About this Specialization' ) );


		//created by fields
		$CreatedBy_fields   = array();
		$CreatedBy_fields[] = $my_meta->addText( $pre . '_createdby_info', array( 'name' => 'Info' ), true );
		$CreatedBy_fields[] = $my_meta->addText( $pre . '_createdby_referrer', array( 'name' => 'Referrer' ), true );
		$CreatedBy_fields[] = $my_meta->addText( $pre . '_createdby_project', array( 'name' => 'Project' ), true );
		$CreatedBy_fields[] = $my_meta->addText( $pre . '_createdby_certificate', array( 'name' => 'Certificate' ), true );
		$CreatedBy_fields[] = $my_meta->addImage( $pre . '_createdby_image', array( 'name' => 'Logo' ), true );

		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addCondition( $pre . '_created_by_conditinal',
			array(
				'name'   => __( 'Enable created by fields? ', 'credglv' ),
				'desc'   => __( '<small>Turn ON if you want to enable the <strong>Created By fields</strong>.</small>', 'credglv' ),
				'fields' => $CreatedBy_fields,
				'std'    => false
			) );


		//Project field
		$my_meta->addTextarea( $pre . '_project_area', array( 'name' => 'Project Field Area' ) );


		//Creator fields
		$Creator_fields   = array();
		$Creator_fields[] = $my_meta->addText( $pre . '_creator_info_text', array( 'name' => 'Info' ), true );
		$Creator_fields[] = $my_meta->addTextarea( $pre . '_creator_description_area', array( 'name' => 'Description' ), true );
		$Creator_fields[] = $my_meta->addImage( $pre . '_creator_image', array( 'name' => 'Background Image' ), true );


		//Choose checkbox block
		$arr = array(
			'_content'            => __( 'Content And Community', 'credglv' ),
			'_person_support'     => __( 'Personalized support', 'credglv' ),
			'_additional_feature' => __( 'Additional features', 'credglv' )
		);

		foreach ( $arr as $key => $val ) {
			$list_meta = array();


			$list_meta[] = $my_meta->addText( $pre . $key . '_text', array( 'name' => $val ), true );
			$list_meta[] = $my_meta->addCheckbox( $pre . $key . 'certificate_checkbox', array( 'name' => __( 'Certificate', 'credglv' ) ), true );
			$list_meta[] = $my_meta->addCheckbox( $pre . $key . 'self_checkbox', array( 'name' => __( 'Self - study', 'credglv' ) ), true );

			/*
			 * Then just add the fields to the repeater block
			 */
			//repeater block
			$my_meta->addRepeaterBlock( $pre . $key . '_list_meta_repeator', array(
				'inline'   => true,
				'name'     => $val,
				'fields'   => $list_meta,
				'sortable' => true
			) );
		}
		// FAQ repeater block
		$my_meta->addCondition( $pre . '_creator_by_conditinal',
			array(
				'name'   => __( 'Enable Creator Fields? ', 'credglv' ),
				'desc'   => __( '<small>Turn ON if you want to enable the <strong>Creator Fields</strong>.</small>', 'credglv' ),
				'fields' => $Creator_fields,
				'std'    => false
			) );

		$faq_fields[] = $my_meta->addText( $pre . '_faq_title_text', array( 'name' => 'Title' ), true );
		$faq_fields[] = $my_meta->addTextarea( $pre . '_faq_des_area', array( 'name' => 'Description' ), true );
		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addRepeaterBlock( $pre . '_faq_repeator', array(
			'inline'   => true,
			'name'     => 'FAQ block',
			'fields'   => $faq_fields,
			'sortable' => true
		) );
		$hiw_fields   = array();
		$hiw_fields[] = $my_meta->addText( $pre . '_hiw_referrerwork', array( 'name' => 'Referrerwork' ), true );
		$hiw_fields[] = $my_meta->addText( $pre . '_hiw_help', array( 'name' => 'Help from Your Peers' ), true );
		$hiw_fields[] = $my_meta->addText( $pre . '_hiw_certificate', array( 'name' => 'Certificates' ), true );

		/*
		 * Then just add the fields to the repeater block
		 */
		//repeater block
		$my_meta->addCondition( $pre . '_howitwork_conditinal',
			array(
				'name'   => __( 'Enable how it work fields? ', 'credglv' ),
				'desc'   => __( '<small>Turn ON if you want to enable the <strong>how it work fields</strong>.</small>', 'credglv' ),
				'fields' => $hiw_fields,
				'std'    => false
			) );
		$my_meta->Finish();

	}

	/**
	 * Add custom field Referrer Category
	 *
	 * @throws RuntimeException
	 */
	public function addTemPlateMetaField() {
		//update_option('example_option', json_encode($_POST));

		$term_id = isset( $_GET['tag_ID'] ) ? $_GET['tag_ID'] : null;
		$model   = null;
		if ( isset( $term_id ) ) {
			// case edit term
			$model = ReferrerCategoryModel::findOne( $term_id );
		} else {
			// case add new term
			$model = new ReferrerCategoryModel();
		}

		$form = new Form();
		$form->bind( $model->getData( $model->getData() ) ); // ??? @@~

		$this->render( 'createMetaCat', [
			'form'       => $form,
			'model'      => $model,
			'attributes' => $model->attributes
		] );
	}

	//render html video field
	public function renderVideoField( $control ) {
		return $this->render( 'partials/video_field', [ 'control' => $control ], true );
	}

	//render html image field
	public function renderImageField( $control ) {
		return $this->render( 'partials/image_field', [ 'control' => $control ], true );
	}

	public function renderAddMoreAnswer( $control ) {
		return $this->render( 'partials/add-more-answer', [ 'control' => $control ], true );
	}

	//render html muilti row field
	public function renderMultiRowField( $control ) {
		return $this->render( 'partials/multi_row_field', [ 'control' => $control ], true );
	}

	/**
	 * Save Referrer Category ( action - hook )
	 *
	 * @param $term_id
	 * @param $taxonomy
	 */
	public function saveCategoryReferrer( $term_id, $taxonomy ) {
		if ( isset( $_POST ) && is_array( $_POST ) ) {
			$this->saveMetaCatBox( $term_id, $_POST );
		}
	}

	/**
	 * Add filters to referrer list
	 */
	public function addReferrerFilter() {
		$type = 'post';
		if ( isset( $_GET['post_type'] ) ) {
			$type = $_GET['post_type'];
		}
		if ( $type == 'referrer' ) {
			$users = new \WP_User_Query( array(
				'role' => [ 'credglv_instructor' ]
			) );
			$users = $users->get_results();
			if ( $users ) {
				$options = [
					'' => __( 'All Instructor', 'credglv' )
				];
				foreach ( $users as $user ) {
					$options[ $user->ID ] = $user->display_name;
				}
				echo ( new Form() )->field( 'instructor', [
					'options'  => $options,
					'type'     => 'select',
					'name'     => 'instructor',
					'template' => '{input}',
					'selected' => isset( $_GET['instructor'] ) ? $_GET['instructor'] : ''

				] );
			}
		}
	}

	public function addReferrerFilterQuery( $query ) {
		global $pagenow;
		$type = 'post';
		if ( isset( $_GET['post_type'] ) ) {
			$type = $_GET['post_type'];
		}
		if ( $type == 'referrer' ) {
			if ( is_admin() && $pagenow == 'edit.php' && isset( $_GET['instructor'] ) && $_GET['instructor'] != '' ) {
				$instructor = new Instructor( $_GET['instructor'] );
				$referrers    = $instructor->getReferrers();
				if ( empty( $referrers ) ) {
					$referrers[] = - 1;
				}
				$query->query_vars['post__in'] = $referrers;
			}
		}

		return $query;
	}

	/**
	 * [duplicatePost x2 post]
	 * @return [type] [description]
	 */
	public function duplicatePost() {
		if ( isset( $_POST['post_id'] ) ) {
			//get post
			$post = get_post( [ 'ID' => $_POST['post_id'] ] );
			if ( $post ) {
				//
			}
		}
	}

	/**
	 * Register all actions that controller want to hook
	 * @return mixed
	 */
	public static function registerAction() {
		add_action( 'created_cat_referrer', [ self::getInstance(), 'saveCategoryReferrer' ], 10, 2 );
		add_action( 'edited_cat_referrer', [ self::getInstance(), 'saveCategoryReferrer' ], 10, 2 );
		add_action( "restrict_manage_posts", [ self::getInstance(), 'addReferrerFilter' ] );
		add_filter( "parse_query", [ self::getInstance(), 'addReferrerFilterQuery' ] );

		return [
			'actions' => [
				'admin_init'                 => [ self::getInstance(), 'addMetaBoxReferrer' ],
				'save_post'                  => [ self::getInstance(), 'saveReferrer' ],
				'add_meta_boxes'             => [ self::getInstance(), 'addTemplateReferrer' ],
				'cat_referrer_edit_form'       => [ self::getInstance(), 'addTemPlateMetaField' ],
				'cat_referrer_add_form_fields' => [ self::getInstance(), 'addTemPlateMetaField' ],
			],
			'ajax'    => [
				'update_referrer'       => [ self::getInstance(), 'updateReferrer' ],
				'ajax_save_post_type' => [ self::getInstance(), 'save' ],
				'ajax_del_post'       => [ self::getInstance(), 'delete' ],
				'ajax_get_modal'      => [ self::getInstance(), 'getModal' ],
				'ajax_duplicate_post' => [ self::getInstance(), 'duplicatePost' ],
			],

		];
	}

}