<?php
/**
 * @copyright Â© 2019 by GLV
 * @project Cred GLV Plugin
 *
 * @since 1.0
 *
 */


namespace credglv\front\controllers;

use credglv\core\interfaces\FrontControllerInterface;
use credglv\models\UserModel;


class MycredController extends FrontController implements FrontControllerInterface {
	public $arr_share_comission;

	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
		$this->arr_share_comission = array( 6, 1, 1, 1 );

	}


	public function credglv_transfer_active_verify( $transferid, $request, $settings, $context ) {
		$user     = new UserModel();
		$settings = mycred_part_woo_settings();
		if ( isset( $request['recipient_id'] ) && ! empty( $request['recipient_id'] ) ) {
			$user_id = $request['recipient_id'];
			$mycred  = mycred( $settings['point_type'] );

			// Excluded from usage
			if ( $mycred->exclude_user( $user_id ) ) {
				wc_add_notice( __( 'You are not allowed to use this feature.', 'credglv' ), 'error' );

				return;
			}
			$balance = $mycred->get_users_balance( $user_id );
			if ( $user->check_actived_referral( $user_id, 0 ) && $balance >= 15 && ! $mycred->has_entry( 'register_fee', 1, $user_id ) ) {
				$mycred->add_creds( 'register_fee',
					$user_id,
					- 15,
					__( 'Joining fee', 'credglv' ),
					1,
					'',
					$settings['point_type'] );
				$this->mycred_share_commision( $user_id, $mycred );
				$user->update_active_status( $user_id );

			}
		}
	}

	public function mycred_share_commision( $user_id, $mycred ) {
		$this->share_referral_uper( $user_id, 0, $mycred );
	}

	public function share_referral_uper( $user_id, $level, $mycred ) {
		$user          = UserModel::getInstance();
		$user_id_tempp = $user->get_referral_parent( $user_id );
		if ( ! empty( $user_id_tempp->referral_parent ) && isset( $user_id_tempp->referral_parent ) && $level <= 3 ) {
			$user_id_tempp = $user_id_tempp->referral_parent;
			$mycred->add_creds( 'share_comission',
				$user_id_tempp,
				$this->arr_share_comission[ $level ],
				__( 'Share commission from actived user ' . $user_id, 'credglv' ) );
			$level ++;
			$this->share_referral_uper( $user_id_tempp, $level, $mycred );
		}
	}

	public function init_hook() {
	}


	function credglv_assets_enqueue() {

	}

	public function credglv_transfer_form_extra_otp_field( $fields, $args, $settings ) {


		$fields .= '
		<div class="row">

			<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

				<div class="form-group select-recipient-wrapper">
				<label>' . __( "Pin", "credglv" ) . '</label>
				<br>
				<input type="text" name="mycred_new_transfer[pin_transfer]" 
				value="" aria-required="true" class="form-control" >
				</div>
			</div>
		</div>
		<br>
';

		return $fields;
	}

	public static function registerAction() {


		/*'login_url'             => [
			'\credglv\models\UserModel' => [ 'redirectLoginUrl', 10, 3 ],
		],*/
		return [
			'actions' => [
				'init'                       => [ self::getInstance(), 'init_hook' ],
				'wp_enqueue_scripts'         => [ self::getInstance(), 'credglv_assets_enqueue' ],
				'mycred_transfer_completed'  => [ self::getInstance(), 'credglv_transfer_active_verify', 10, 4 ],
				'mycred_transfer_form_extra' => [ self::getInstance(), 'credglv_transfer_form_extra_otp_field', 10, 3 ],
			],
			'assets'  => [
				/*'css' => [
					[
						'id'           => 'credglv-user-profile',
						'isInline'     => false,
						'url'          => '/front/assets/css/credglv-user-profile.css',
						'dependencies' => [ 'credglv-style', 'font-awesome' ]
					],
					[
						'id'       => 'category',
						'isInline' => false,
						'url'      => '/front/assets/css/category.css'
					],
				],
				'js' => [
					[
						'id'       => 'credglv-main-js',
						'isInline' => false,
						'url'      => '/front/assets/js/main.js',
					]
				]*/
			],
			'ajax'    => [
//				'ajax_update_profile' => [ self::getInstance(), 'updateProfile' ],
			]
		];
	}

}