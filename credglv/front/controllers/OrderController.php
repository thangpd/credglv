<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */

namespace credglv\front\controllers;


use credglv\core\components\Form;
use credglv\core\components\Hook;
use credglv\core\interfaces\ControllerInterface;

use credglv\core\interfaces\FrontControllerInterface;
use credglv\front\controllers\FrontController;
use credglv\models\OrderItemModel;
use credglv\models\OrderModel;

class OrderController extends FrontController implements FrontControllerInterface {

	/** @var  OrderModel */
	private $order;

	/** @var  Form */

	public function __init() {
		parent::init(); // TODO: Change the autogenerated stub


	}


	public function addUser() {
		$response = [];
		if ( isset( $_POST['order_id'] ) && $_POST['LemaOrder'] ) {
			$orderId      = $_POST['order_id'];
			$credglvOrder = $_POST['LemaOrder'];
			if ( ! empty( $credglvOrder['credglv_order_user_id'] ) ) {
				$this->order = OrderModel::findOne( $orderId );
				$response    = [
					'data' => 'data'
				];
			}
		}

		return $this->responseJson( $response );
	}

	/**
	 * Add one item to current order
	 * POST params :
	 * order_id
	 * course_id
	 * quantity
	 */
	public function addItem() {
		$amount         = @$_POST['amount'];
		$type           = ! empty( $_POST['type'] ) ? $_POST['type'] : OrderModel::ORDER_TYPE_CASH;
		$data_validate  = OrderModel::getPointConfigType( $type );
		$transaction_id = preg_replace( '/\D/', '', strtotime( "now" ) );

		if ( ! empty( $amount ) ) {
			if ( $amount >= $data_validate['max_tax'] ) {

				if ( $type == OrderModel::ORDER_TYPE_CASH ) {
					$user_id = get_current_user_id();
					$fee     = $amount * $data_validate['max_tax_percent'] / 100;
					if ( $fee > $data_validate['max_tax'] ) {
						$fee = $data_validate['max_tax'];
					}
					$settings = mycred_part_woo_settings();
					$mycred   = mycred( $settings['point_type'] );
					$mycred->add_creds( $type . '_redeem',
						$user_id,
						- ( $amount ),
						__( 'Redeem : ' . - ( $amount ), 'credglv' ) );
					try {
						$order                 = new OrderModel();
						$order->user_id        = $user_id;
						$order->amount         = $amount - $fee;
						$order->fee            = $fee;
						$order->transaction_id = $transaction_id;
						$order->type           = $type;
						$order->active         = 1;
						$order->data           = json_encode( array(
							$type . '_redeem' => '',
							'message'         => __( 'Cash Redeem from ' . $mycred->core['name']['singular'] .' : '. ( $amount - $fee ) . $mycred->core['after'], 'credglv' )
						) );
						$order->save();
					} catch ( Exception $e ) {
						throw ( new Exception( 'Cant add order referral' ) );
					}
					$this->responseJson( [
						'message' => 'Add item ok redeem',
						'data'    => $order->data,
					] );
				} elseif ( $type == OrderModel::ORDER_TYPE_LOCAL ) {
					$order = new OrderModel();

					$user_id = get_current_user_id();

					$total_user_cash = $order->getTotalUserCash( $user_id, 1, OrderModel::ORDER_TYPE_CASH );
					$fee             = 0;
					if ( $amount <= $total_user_cash->total ) {
						try {
							$order->user_id        = $user_id;
							$order->transaction_id = $transaction_id;
							$order->amount         = $amount - $fee;
							$order->fee            = $fee;
							$order->type           = $type;
							$order->active         = 0;
							$order->data           = json_encode( array(
								$type . '_redeem' => '',
								'message'         => __( 'Local bank redeem from cash : ' . ( $amount - $fee ), 'credglv' )
							) );
							$order->save();
							//minus cash balance;
							$order->user_id        = $user_id;
							$order->transaction_id = $transaction_id;
							$order->amount         = - $amount - $fee;
							$order->fee            = $fee;
							$order->type           = OrderModel::ORDER_TYPE_CASH;
							$order->active         = 1;
							$order->data           = json_encode( array(
								$type . '_redeem' => '',
								'message'         => __( 'Redeem to local bank : ' . ( $amount - $fee ), 'credglv' )
							) );
							$order->save();
						} catch ( Exception $e ) {
							throw ( new Exception( 'Cant add order referral' ) );
						}
						$this->responseJson( [
							'message' => 'Add cash to local redeem transfered',
							'data'    => $order->data,
						] );
					} else {
						$this->responseJson( [
							'code'    => 403,
							'message' => 'Cash insufficient funds',
							'data'    => '',
						] );
					}
				}
			} else {
				$this->responseJson( [
					'code'    => 403,
					'message' => 'Amount lower than ' . $data_validate['max_tax'],
					'data'    => 'data',
				] );
			}
		} else {
			$this->responseJson( [
				'code' => 403,
				'data' => 'Empty amount',
				'message' => 'Empty amount'
			] );
		}

	}


	/**
	 * Remove an item from order
	 * POST params :
	 * item_id
	 */
	public function removeItem() {
		$order_id = @$_POST['ID'];
		if ( isset( $_POST['item_id'] ) && $order_id ) {
			$item = OrderModel::findOne( $_POST['item_id'] );
			/** @var OrderItemModel $item */
			if ( ! empty( $item ) ) {
				if ( $item->delete() ) {

					$this->responseJson( [
						'data' => 'data'
					] );
				}
			}
		}
	}


	/**
	 * Register all actions that controller want to hook
	 * @return mixed
	 */
	public static function registerAction() {
		// TODO: Implement registerAction() method
		return [
			'actions' => [
				'wp_loaded' => [ self::getInstance(), '__init' ],
			],
			'ajax'    => [
				'credglv_order_add_item'    => [ self::getInstance(), 'addItem' ],
				'credglv_order_add_billing' => [ self::getInstance(), 'addBillingAddress' ]
			]
		];
	}
}