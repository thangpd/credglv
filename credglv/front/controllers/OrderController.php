<?php
/**
 * @copyright Â© 2017 by Solazu Co.,LTD
 * @project Learn Master Plugin
 *
 * @since 1.0
 *
 */

namespace credglv\front\controllers;


use credglv\core\components\Form;
use credglv\core\components\Hook;
use credglv\core\interfaces\ControllerInterface;

use credglv\core\interfaces\FrontControllerInterface;
use credglv\front\controllers\FrontController;
use credglv\models\OrderItemModel;
use credglv\models\OrderModel;

class OrderController extends FrontController implements FrontControllerInterface {

	/** @var  OrderModel */
	private $order;

	/** @var  Form */

	public function __init() {
		parent::init(); // TODO: Change the autogenerated stub


	}


	public function addUser() {
		$response = [];
		if ( isset( $_POST['order_id'] ) && $_POST['LemaOrder'] ) {
			$orderId      = $_POST['order_id'];
			$credglvOrder = $_POST['LemaOrder'];
			if ( ! empty( $credglvOrder['credglv_order_user_id'] ) ) {
				$this->order = OrderModel::findOne( $orderId );
				$response    = [
					'data' => 'data'
				];
			}
		}

		return $this->responseJson( $response );
	}

	/**
	 * Add one item to current order
	 * POST params :
	 * order_id
	 * course_id
	 * quantity
	 */
	public function addItem() {
		$amount          = @$_POST['amount'];
		$max_tax         = 30;
		$max_tax_percent = 6;
		if ( ! empty( $amount ) ) {
			if ( $amount >= $max_tax ) {
				$user_id = get_current_user_id();
				$fee     = $amount * $max_tax_percent / 100;
				if ( $fee > $max_tax ) {
					$fee = $max_tax;
				}
				$settings = mycred_part_woo_settings();
				$mycred   = mycred( $settings['point_type'] );

				$mycred->add_creds( 'cash_redeem',
					$user_id,
					- ( $amount + $fee ),
					__( 'Cash redeem : ' . - ( $amount + $fee ), 'credglv' ) );
				try {
					$order          = new OrderModel();
					$order->user_id = $user_id;
					$order->amount  = $amount;
					$order->fee     = $fee;
					$order->data    = json_encode( array(
						'cash_redeem' => '',
						'message'     => __( 'Cash redeem : ' . - ( $amount + $fee ), 'credglv' )
					) );
					$order->save();
				} catch ( Exception $e ) {
					throw ( new Exception( 'Cant add order referral' ) );
				}
				$this->responseJson( [
					'message' => 'Add item ok redeem',
					'data'    => $order->data,
				] );
			} else {
				$this->responseJson( [
					'code'    => 403,
					'message' => 'Amount lower than 30',
					'data'    => 'data',
				] );
			}
		} else {
			$this->responseJson( [
				'code' => 403,
				'data' => 'Empty amount'
			] );
		}

	}


	/**
	 * Remove an item from order
	 * POST params :
	 * item_id
	 */
	public function removeItem() {
		$order_id = @$_POST['ID'];
		if ( isset( $_POST['item_id'] ) && $order_id ) {
			$item = OrderModel::findOne( $_POST['item_id'] );
			/** @var OrderItemModel $item */
			if ( ! empty( $item ) ) {
				if ( $item->delete() ) {

					$this->responseJson( [
						'data' => 'data'
					] );
				}
			}
		}
	}


	/**
	 * Register all actions that controller want to hook
	 * @return mixed
	 */
	public static function registerAction() {
		// TODO: Implement registerAction() method
		return [
			'actions' => [
				'wp_loaded' => [ self::getInstance(), '__init' ],
			],
			'ajax'    => [
				'credglv_order_add_item'    => [ self::getInstance(), 'addItem' ],
				'credglv_order_add_billing' => [ self::getInstance(), 'addBillingAddress' ]
			]
		];
	}
}