<?php
/**
 * @copyright Â© 2019 by GLV
 * @project Cred GLV Plugin
 *
 * @since 1.0
 *
 */



namespace credglv\core\components;



use credglv\core\BaseObject;
use credglv\core\interfaces\ComponentInterface;
use credglv\core\interfaces\ModelInterface;


class ModelManager extends BaseObject implements ComponentInterface
{


    /**
     * ModelManager constructor.
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
        $models = $this->getAllModels();
        $models = apply_filters('credglv_models', $models);
        foreach ($models as $model) {
            /** @var ModelInterface $model */
            $config = $model::getPosttypeConfig();

            if (isset($config['post'])) {
                /**
                 * Register post type
                 */
                credglv()->wp->register_post_type($config['post']['name'], $config['post']['args']);
                /**
                 * Register action for this post type
                 */
                $modelInstance = $model::getInstance();
                credglv()->wp->add_action('save_post_' . $config['post']['name'], [$modelInstance, 'afterSave']);
                if (method_exists($modelInstance, 'beforeDelete')) {
                    add_action( 'before_delete_post', [$modelInstance, 'beforeDelete'], 10 );
                }

                /* if (method_exists($modelInstance, 'beforeSave')) {
                     credglv()->wp->add_action("");
                 }*/

            }
            if (isset($config['taxonomy'])) {
                /**
                 * Register taxonomy
                 */
                credglv()->wp->register_taxonomy($config['taxonomy']['name'], $config['taxonomy']['object_type'], $config['taxonomy']['args']);

            }
            if (isset($config['actions'])) {
                foreach ($config['actions'] as $name => $callback) {
                    credglv()->wp->add_action($name, $callback);
                }
            }
            if (isset($config['ajax'])) {
                foreach ($config['ajax'] as $name => $callback) {
                    credglv()->wp->add_action("wp_ajax_{$name}", $callback);
                    credglv()->wp->add_action("wp_ajax_nopriv_{$name}", $callback);
                }
            }
            if (isset($config['meta'])) {

            }

        }
        credglv()->hook->registerHook(Hook::CREDGLV_MODEL_READY, [$this, 'modelReady']);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }


    /**
     * Scan and index all model object
     * @return array|mixed|null
     */
    public function getAllModels(){
        $models = [];
        if (empty($models) || CREDGLV_DEBUG) {
            $models = credglv()->helpers->file->findAllClass('credglv', 'Model', ModelInterface::class);
        }
        return $models;

    }

    /**
     * @return void
     */
    public function modelReady(){

    }



    /**
     * If this object able to cache, it needs provider owner cache name
     * @return mixed
     */
    public function getCahename()
    {
        return "models_manager";
    }

    /**
     * Flush owner cache to refresh data
     * @return mixed
     */
    public function flushCache()
    {

    }
}